{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","length","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"sLAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UACb,qBAAuB,iBAE7B,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCR1CK,EAAU,aAyBD,EAvBA,WAUX,OATgBC,IAAMC,IAAIF,GASXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCZ9BK,EAXM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,qBAAKd,UAAU,QAAf,SACKc,KCDPC,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GAmFSC,EA9EH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,iBAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,0BAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACRC,QAAQC,IAAI,UACZC,IAAqB3B,MAAK,SAAA4B,GACxBH,QAAQC,IAAI,qBACZT,EAASW,QAEV,IAEHH,QAAQC,IAAI,SAAUV,EAAMa,OAAQ,SAEpC,IAcMC,EAAcV,EAAUJ,EAAQA,EAAMe,QAAO,SAAAzC,GAAI,OAAIA,EAAKG,aAyBhE,OACE,gCACE,uCACA,cAAC,EAAD,CAAce,QAASc,IACvB,6BACGQ,EAAYE,KAAI,SAAA1C,GAAI,OACnB,cAAC,EAAD,CAAoBA,KAAMA,EACxBC,iBAAkB,kBAzBD,SAAAc,GAEzB,IAAMf,EAAO0B,EAAMiB,MAAK,SAAAC,GAAC,OAAIA,EAAE7B,KAAOA,KAChC8B,EAAW,2BAAQ7C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDkC,EAAmBtB,EAAI8B,GAAanC,MAAK,SAAAoC,GACvCnB,EAASD,EAAMgB,KAAI,SAAA1C,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAO8C,SAClDC,OAAM,SAAAC,GACPf,EAAgB,SAAD,OACJjC,EAAKK,QADD,sCAGf4C,YAAW,WACThB,EAAgB,QACf,KACHN,EAASD,EAAMe,QAAO,SAAAG,GAAC,OAAIA,EAAE7B,KAAOA,SAWNmC,CAAmBlD,EAAKe,MADvCf,EAAKe,SAIpB,uBAAMoC,SAjDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBjD,QAASuB,EACT2B,MAAM,IAAIC,MAAOC,cACjBtD,UAAWuD,KAAKC,SAAW,IAG7BtB,EAAmBiB,GAAY5C,MAAK,SAAAoC,GAClCnB,EAASD,EAAMkC,OAAOd,IACtBjB,EAAW,QAuCX,UACE,uBAAOgC,MAAOjC,EAASkC,SAlCL,SAACV,GACvBjB,QAAQC,IAAIgB,EAAMW,OAAOF,OACzBhC,EAAWuB,EAAMW,OAAOF,UAiCpB,wBAAQG,KAAK,SAAb,qBAGF,wBAAQ1D,QAAS,kBAAMyB,GAAYD,IAAnC,SACGA,EAAO,oBAEV,cAAC,EAAD,Q,MCzFNmC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.7737727c.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important\n        ? 'make not important' : 'make important'\n\n    return (\n        <li className=\"note\">\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n\n    // const nonExisting = {\n    //     id: 10000,\n    //     content: 'This note is not saved to server',\n    //     date: '2019-05-30T17:30:31.098Z',\n    //     important: true,\n    // }\n\n    return request.then(response => response.data);\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject);\n    return request.then(response => response.data);\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\n    return request.then(response => response.data);\n}\n\nexport default {\n    getAll,\n    create,\n    update\n}","const Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\nexport default Notification","import React, { useState, useEffect } from 'react'\n//import axios from 'axios'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('a new note...');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n  useEffect(() => {\n    console.log('effect')\n    noteService.getAll().then(initialNotes => {\n      console.log(\"promise fulfilled\")\n      setNotes(initialNotes)\n    })\n  }, [])\n\n  console.log('render', notes.length, 'notes')\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    }\n\n    noteService.create(noteObject).then(returnedNote => {\n      setNotes(notes.concat(returnedNote))\n      setNewNote('')\n    })\n  }\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n  const handleNoteChage = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  }\n\n  const toggleImportanceOf = id => {\n    //const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService.update(id, changedNote).then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    }).catch(error => {\n      setErrorMessage(\n        `Note '${note.content}' was already removed from server`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n      setNotes(notes.filter(n => n.id !== id))\n    })\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <ul>\n        {notesToShow.map(note =>\n          <Note key={note.id} note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)} />\n        )}\n      </ul>\n      <form onSubmit={addNote} >\n        <input value={newNote} onChange={handleNoteChage} />\n        <button type=\"submit\">save</button>\n      </form>\n\n      <button onClick={() => setShowAll(!showAll)}>\n        {showAll ? `Important` : `All`}\n      </button>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}